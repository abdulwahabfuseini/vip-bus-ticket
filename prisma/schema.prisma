// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  email         String     @unique
  emailVerified String?
  phoneNumber   String     @unique
  password      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  accounts      Account[]
}

model Account {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Hiring {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  company       String
  email         String
  phoneNumber   String
  address       String
  pickup        String
  destination   String
  duration      String
  time          String
  typeofbus     String
  buses         String
  purpose       String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model City {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  terminals Terminal[]
}

model Terminal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  cityId    String
  routes    Route[]
  city   City  @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@unique([name, cityId])
}


model Route {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  from      String
  to        String
  type      String
  date      String
  terminalId    String
  schedule  Schedule[]
  terminal Terminal  @relation(fields: [terminalId], references: [id], onDelete: Cascade)
}

model Schedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  time      String 
  seats     Int
  price     Int
  arrival   String
  carNumber String
  routeId String
  route  Route  @relation(fields: [routeId], references: [id], onDelete: Cascade)
}